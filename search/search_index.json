{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docker Tor What is Tor The Tor Project is a nonprofit organization primarily responsible for maintaining software for the Tor anonymity network. The Tor browser is the most well known piece of software maintained. The Tor Browser uses the onion network to anonymize browsing and the onion network relies on tor relays to achieve this. Tor can't help you if you use it wrong! Learn how to be safe at https://www.torproject.org/download/download#warning What is this image This docker image runs a Tor service on an Alpine linux base image. The Tor service that can be configure, as single or combination of a: Tor Socks5 proxy into the onion network (default) Tor hidden service for onion websites (not supported yet) Tor relay to support the onion network (not supported yet) This docker image will: Start with an Alpine linux base image Download the Tor source code tarballs and associated signature file Verify the Tor source tarballs against Roger Dingledine: 0xEB5A896A28988BF5 key Compile Tor from source Templates out the Tor config file torrc (this step is skipped if torrc.lock file exists in the /tor directory) Set a torrc.lock file to persist config file Starts the tor service During container creation the container will log creation of the config file, the templated config file and once created will log any Tor notifications. This image exposes port 9050/tcp and 9051/tcp . Data can be persisted and torrc config manually edited by mounting the /tor directory. How to use this image Create a docker image with the following docker run command docker run -d --name tor -p 9050:9050 -v <your-folder>:/tor barneybuffet/tor:latest Docker compose file: --- version: \"3.9\" services: tor: container_name: tor image: barneybuffet/tor:latest environment: TOR_LOG_CONFIG:'false' TOR_PROXY: 'true' TOR_PROXY_PORT: '9050' TOR_PROXY_ACCEPT: 'accept 127.0.0.1,accept 10.0.0.0/8,accept 172.16.0.0/12,accept 192.168.0.0/16' TOR_CONTROL: 'false' TOR_CONTROL_PORT: '9051' TOR_CONTROL_PASSWORD: 'password' TOR_CONTROL_COOKIE: 'true' TOR_SERVICE: 'false' TOR_SERVICE_HOSTS='bitcoin=80:192.168.0.3:80' TOR_SERVICE_HOSTS_CLIENTS='bitcoin=alice' TOR_RELAY: 'false' volumes: - tor:/tor/ ports: - \"9050:9050/tcp\" restart: unless-stopped Volume This image sets the Tor data directory to /tor , including the authorisation cookie. To persist Tor data and config you can mount the /tor directory from your image. If the Tor configuration you are after isn't set by the container environmental variables you can modify the /tor/torrc for your custom configuration. The torrc file will persist while the /tor/torrc.lock file is present. Available Environmental Flags Below is a list of available environmental flags that can be set during container creation. Flag Choices/Default Comments TOR_LOG_CONFIG true/ false Should the tor config file torrc be echo'd to the log. This can be helpful when setting up a new Tor daemon TOR_PROXY true /false Set up the Tor daemon as a Socks5 proxy TOR_PROXY_PORT string (9050) What port the Tor daemon should listen to for proxy requests TOR_PROXY_SOCKET true/ false Create a unix socket for the proxy in the data folder TOR_PROXY_ACCEPT Accept localhost and RFC1918 networks, reject all others What IP addresses are allowed to route through the proxy TOR_CONTROL true/ false Should the Tor control be enabled TOR_CONTROL_PORT string (9051) What port should the Tor daemon be controlled on. If enabled cookie authentication is also enabled by default TOR_CONTROL_SOCKET true/ false Create a unix socket for the Tor control TOR_CONTROL_PASSWORD string Authentication password for using the Tor control port TOR_CONTROL_COOKIE true /false Cookie to confirm when Tor control port request sent TOR_SERVICE true/ false Set up the Tor daemon with hidden services TOR_SERVICE_HOSTS hostname=wan-port:redict-ip:rediect-port Tor hidden service configuration TOR_SERVICE_HOSTS_CLIENTS hostname:client-1,client-2,... Authorised clients for hostname TOR_RELAY true/ false NOT IMPLEMENTED YET References The Tor Project How to install Tor hexops/dockerfile - Dockerfile best practices Blockstream/bitcoin-images/tor RaspiBolt/Privacy DarkIsDude/tor-server dperson/torproxy cha87de/docker-skeleton Container Structure Tests","title":"Home"},{"location":"#docker-tor","text":"","title":"Docker Tor"},{"location":"#what-is-tor","text":"The Tor Project is a nonprofit organization primarily responsible for maintaining software for the Tor anonymity network. The Tor browser is the most well known piece of software maintained. The Tor Browser uses the onion network to anonymize browsing and the onion network relies on tor relays to achieve this. Tor can't help you if you use it wrong! Learn how to be safe at https://www.torproject.org/download/download#warning","title":"What is Tor"},{"location":"#what-is-this-image","text":"This docker image runs a Tor service on an Alpine linux base image. The Tor service that can be configure, as single or combination of a: Tor Socks5 proxy into the onion network (default) Tor hidden service for onion websites (not supported yet) Tor relay to support the onion network (not supported yet) This docker image will: Start with an Alpine linux base image Download the Tor source code tarballs and associated signature file Verify the Tor source tarballs against Roger Dingledine: 0xEB5A896A28988BF5 key Compile Tor from source Templates out the Tor config file torrc (this step is skipped if torrc.lock file exists in the /tor directory) Set a torrc.lock file to persist config file Starts the tor service During container creation the container will log creation of the config file, the templated config file and once created will log any Tor notifications. This image exposes port 9050/tcp and 9051/tcp . Data can be persisted and torrc config manually edited by mounting the /tor directory.","title":"What is this image"},{"location":"#how-to-use-this-image","text":"Create a docker image with the following docker run command docker run -d --name tor -p 9050:9050 -v <your-folder>:/tor barneybuffet/tor:latest Docker compose file: --- version: \"3.9\" services: tor: container_name: tor image: barneybuffet/tor:latest environment: TOR_LOG_CONFIG:'false' TOR_PROXY: 'true' TOR_PROXY_PORT: '9050' TOR_PROXY_ACCEPT: 'accept 127.0.0.1,accept 10.0.0.0/8,accept 172.16.0.0/12,accept 192.168.0.0/16' TOR_CONTROL: 'false' TOR_CONTROL_PORT: '9051' TOR_CONTROL_PASSWORD: 'password' TOR_CONTROL_COOKIE: 'true' TOR_SERVICE: 'false' TOR_SERVICE_HOSTS='bitcoin=80:192.168.0.3:80' TOR_SERVICE_HOSTS_CLIENTS='bitcoin=alice' TOR_RELAY: 'false' volumes: - tor:/tor/ ports: - \"9050:9050/tcp\" restart: unless-stopped","title":"How to use this image"},{"location":"#volume","text":"This image sets the Tor data directory to /tor , including the authorisation cookie. To persist Tor data and config you can mount the /tor directory from your image. If the Tor configuration you are after isn't set by the container environmental variables you can modify the /tor/torrc for your custom configuration. The torrc file will persist while the /tor/torrc.lock file is present.","title":"Volume"},{"location":"#available-environmental-flags","text":"Below is a list of available environmental flags that can be set during container creation. Flag Choices/Default Comments TOR_LOG_CONFIG true/ false Should the tor config file torrc be echo'd to the log. This can be helpful when setting up a new Tor daemon TOR_PROXY true /false Set up the Tor daemon as a Socks5 proxy TOR_PROXY_PORT string (9050) What port the Tor daemon should listen to for proxy requests TOR_PROXY_SOCKET true/ false Create a unix socket for the proxy in the data folder TOR_PROXY_ACCEPT Accept localhost and RFC1918 networks, reject all others What IP addresses are allowed to route through the proxy TOR_CONTROL true/ false Should the Tor control be enabled TOR_CONTROL_PORT string (9051) What port should the Tor daemon be controlled on. If enabled cookie authentication is also enabled by default TOR_CONTROL_SOCKET true/ false Create a unix socket for the Tor control TOR_CONTROL_PASSWORD string Authentication password for using the Tor control port TOR_CONTROL_COOKIE true /false Cookie to confirm when Tor control port request sent TOR_SERVICE true/ false Set up the Tor daemon with hidden services TOR_SERVICE_HOSTS hostname=wan-port:redict-ip:rediect-port Tor hidden service configuration TOR_SERVICE_HOSTS_CLIENTS hostname:client-1,client-2,... Authorised clients for hostname TOR_RELAY true/ false NOT IMPLEMENTED YET","title":"Available Environmental Flags"},{"location":"#references","text":"The Tor Project How to install Tor hexops/dockerfile - Dockerfile best practices Blockstream/bitcoin-images/tor RaspiBolt/Privacy DarkIsDude/tor-server dperson/torproxy cha87de/docker-skeleton Container Structure Tests","title":"References"},{"location":"build/","text":"Building from Source MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Build"},{"location":"build/#building-from-source","text":"","title":"Building from Source"},{"location":"build/#mkdocs","text":"For full documentation visit mkdocs.org .","title":"MkDocs"},{"location":"build/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"build/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"control/","text":"Tor Control The Control Port is used to control communication with the Tor daemon. Once the Control Port is open it is important that a form of authentication is set. By default this docker image will default cookie authentication if password is not passed in. The authentication cookie is stored at /tor/control.authcookie and can be accessed if you mount the /tor directory. Enable Tor Control This Docker image will enable Tor control with the flat -e TOR_CONTROl=\"true\" . docker run -d --name tor \\ -e TOR_CONTROL='true' \\ -p 9050:9050/tcp \\ -p 9051:9051/tcp \\ barneybuffet/tor:latest The default control configuration once enabled for this image is: ## The port on which Tor will listen for local connections from Tor ## controller applications, as documented in control-spec.txt. ## https://gitweb.torproject.org/torspec.git/tree/control-spec.txt ControlPort 9051 ## If you enable the controlport, be sure to enable one of these ## authentication methods, to prevent attackers from accessing it. # HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C CookieAuthentication 1 CookieAuthFileGroupReadable 1 If you would prefer to set a password for the control port this can be done with TOR_PROXY_CONTROL_PASSWORD='<my secret password>' docker run -d --name tor \\ -e TOR_CONTROL='true' \\ -e TOR_CONTROL_PORT='9051' -e TOR_CONTROL_PASSWORD='password' \\ -e TOR_CONTROL_COOKIE='false' \\ -p 9050:9050/tcp \\ -p 9051:9051/tcp \\ barneybuffet/tor:latest The docker image will create the following configuration within /tor/torrc ## The port on which Tor will listen for local connections from Tor ## controller applications, as documented in control-spec.txt. ## https://gitweb.torproject.org/torspec.git/tree/control-spec.txt ControlPort 9051 ## If you enable the controlport, be sure to enable one of these ## authentication methods, to prevent attackers from accessing it. HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C #CookieAuthentication 1 #CookieAuthFileGroupReadable 1","title":"Control"},{"location":"control/#tor-control","text":"The Control Port is used to control communication with the Tor daemon. Once the Control Port is open it is important that a form of authentication is set. By default this docker image will default cookie authentication if password is not passed in. The authentication cookie is stored at /tor/control.authcookie and can be accessed if you mount the /tor directory.","title":"Tor Control"},{"location":"control/#enable-tor-control","text":"This Docker image will enable Tor control with the flat -e TOR_CONTROl=\"true\" . docker run -d --name tor \\ -e TOR_CONTROL='true' \\ -p 9050:9050/tcp \\ -p 9051:9051/tcp \\ barneybuffet/tor:latest The default control configuration once enabled for this image is: ## The port on which Tor will listen for local connections from Tor ## controller applications, as documented in control-spec.txt. ## https://gitweb.torproject.org/torspec.git/tree/control-spec.txt ControlPort 9051 ## If you enable the controlport, be sure to enable one of these ## authentication methods, to prevent attackers from accessing it. # HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C CookieAuthentication 1 CookieAuthFileGroupReadable 1 If you would prefer to set a password for the control port this can be done with TOR_PROXY_CONTROL_PASSWORD='<my secret password>' docker run -d --name tor \\ -e TOR_CONTROL='true' \\ -e TOR_CONTROL_PORT='9051' -e TOR_CONTROL_PASSWORD='password' \\ -e TOR_CONTROL_COOKIE='false' \\ -p 9050:9050/tcp \\ -p 9051:9051/tcp \\ barneybuffet/tor:latest The docker image will create the following configuration within /tor/torrc ## The port on which Tor will listen for local connections from Tor ## controller applications, as documented in control-spec.txt. ## https://gitweb.torproject.org/torspec.git/tree/control-spec.txt ControlPort 9051 ## If you enable the controlport, be sure to enable one of these ## authentication methods, to prevent attackers from accessing it. HashedControlPassword 16:872860B76453A77D60CA2BB8C1A7042072093276A3D701AD684053EC4C #CookieAuthentication 1 #CookieAuthFileGroupReadable 1","title":"Enable Tor Control"},{"location":"kubernetes/","text":"Kubernetes How to setup this docker image on a kubernetes cluster Namespace Volume & Claim Config Map Secretes Deployment","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"How to setup this docker image on a kubernetes cluster","title":"Kubernetes"},{"location":"kubernetes/#namespace","text":"","title":"Namespace"},{"location":"kubernetes/#volume-claim","text":"","title":"Volume &amp; Claim"},{"location":"kubernetes/#config-map","text":"","title":"Config Map"},{"location":"kubernetes/#secretes","text":"","title":"Secretes"},{"location":"kubernetes/#deployment","text":"","title":"Deployment"},{"location":"nyx/","text":"Tor Nyx What is Nyx Nyx is a command-line monitor for Tor. With this you can get detailed real-time information about your relay such as bandwidth usage, connections, logs, and much more. Visit [Tor Nyx](https://nyx.torproject.org/) for more information How to access This Docker image installs Python3 and pip installs nyx. Nyx can be used by exec into the container and executing the command nyx References Tor Nyx","title":"Nyx"},{"location":"nyx/#tor-nyx","text":"","title":"Tor Nyx"},{"location":"nyx/#what-is-nyx","text":"Nyx is a command-line monitor for Tor. With this you can get detailed real-time information about your relay such as bandwidth usage, connections, logs, and much more. Visit [Tor Nyx](https://nyx.torproject.org/) for more information","title":"What is Nyx"},{"location":"nyx/#how-to-access","text":"This Docker image installs Python3 and pip installs nyx. Nyx can be used by exec into the container and executing the command nyx","title":"How to access"},{"location":"nyx/#references","text":"Tor Nyx","title":"References"},{"location":"proxy/","text":"Tor Proxy What is a proxy A proxy server acts as an intermediary between clients (you) and servers that provide websites and services. A proxy server thus functions on behalf of the client when requesting services, potentially masking the true origin of the request to the resource server. Tor core implements a Socks5 proxy. SOCKS5 is the most recently optimized version of Socket secure (or SOCKS ) proxy. By default this docker image will configure and run a Tor Socks5 proxy. The proxy can be disabled by setting -e TOR_PROXY=false when running the docker image. Start a Tor Proxy To start a Tor proxy instance with this image run the following docker command: docker run -d --name tor -p 9050:9050/tcp barneybuffet/tor:latest By default the image will: Set socks5 proxy port to 9050 Set socks5 proxy port binding to all ip address. i.e. 0.0.0.0 Restrict socks5 proxy access to RFC1918 local addresses, and reject all others ip address These defaults can be configured via docker environmental variables (options) discussed below. Tor Proxy Options The following environmental (configuration) options are available when configuring the Socks5 proxy: Binding and Port This image configures by default a proxy binding of all ips through 0.0.0.0 and a port of 9050 (the tor default port). Access to the proxy is restricted to RFC1918](https://datatracker.ietf.org/doc/html/rfc1918#section-3) local network IP addresses through accept policies discussed below. The socks5 binding and port will be set to SocksPort 0 if TOR_PROXY=false , disabling the tor proxy client. Default configuration: SocksPort 0.0.0.0:9050 The binding and port can be configure using TOR_PROXY_PORT=<address>:<port> with TOR_PROXY=true . The below env options will bind the proxy to localhost (i.e. 127.0.0.1) on port 9150. This might be useful when using docker-compose and networking services together. docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_PORT=localhost:9150 \\ -p 9150:9150/tcp \\ barneybuffet/tor:latest Bind to ip 192.168.0.1 on port 9100: docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_PORT=192.168.0.1:9100 \\ -p 9100:9100/tcp \\ barneybuffet/tor:latest Accept Policy Tor will allow/deny SOCKS requests based on IP address. By default this image will accept the localhost and all connections from RFC1918 local network IP addresses. All other IP address will be rejected. The SocksPolicy reject * is not configurable by this docker image environmental flags. Default configuration: ## Accept localhost and RFC1918 networks, reject all others SocksPolicy accept 127.0.0.1,accept 10.0.0.0/8,accept 172.16.0.0/12,accept 192.168.0.0/16 SocksPolicy reject * The accept socks policy can be configure using TOR_PROXY_ACCEPT=accept <ip or IP Subnet>,accept <ip or IP Subnet>,... with TOR_PROXY=true . Allow only 192.168.0.11 to use the proxy: docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_ACCEPT='accept 192.168.0.11' \\ -p 9050:9050/tcp \\ barneybuffet/tor:latest Will configure to ## Accept localhost and RFC1918 networks, reject all others SocksPolicy accept 192.168.0.11 SocksPolicy reject * Allow only 192.168.1.0 subnet IPs to use the proxy: docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_ACCEPT=\"accept localhost,accept 192.168.1.0/24\" \\ -p 9050:9050/tcp \\ barneybuffet/tor:latest Will configure to ## Accept localhost and RFC1918 networks, reject all others SocksPolicy accept localhost,accept 192.168.1.0/24 SocksPolicy reject * Test Tor is working Once the docker container is running the tor connection can be tested by opening a terminal within the container and using the below commands Check the container ip address against your internet ip address curl --socks5 localhost:9050 --socks5-hostname localhost:9050 https://ipinfo.io/ip Confirm connection to the Tor network curl --socks5 localhost:9050 --socks5-hostname localhost:9050 -s https://check.torproject.org/ | cat | grep -m 1 Congratulations | xargs The connection to the container can be check using the same commands.","title":"Proxy"},{"location":"proxy/#tor-proxy","text":"","title":"Tor Proxy"},{"location":"proxy/#what-is-a-proxy","text":"A proxy server acts as an intermediary between clients (you) and servers that provide websites and services. A proxy server thus functions on behalf of the client when requesting services, potentially masking the true origin of the request to the resource server. Tor core implements a Socks5 proxy. SOCKS5 is the most recently optimized version of Socket secure (or SOCKS ) proxy. By default this docker image will configure and run a Tor Socks5 proxy. The proxy can be disabled by setting -e TOR_PROXY=false when running the docker image.","title":"What is a proxy"},{"location":"proxy/#start-a-tor-proxy","text":"To start a Tor proxy instance with this image run the following docker command: docker run -d --name tor -p 9050:9050/tcp barneybuffet/tor:latest By default the image will: Set socks5 proxy port to 9050 Set socks5 proxy port binding to all ip address. i.e. 0.0.0.0 Restrict socks5 proxy access to RFC1918 local addresses, and reject all others ip address These defaults can be configured via docker environmental variables (options) discussed below.","title":"Start a Tor Proxy"},{"location":"proxy/#tor-proxy-options","text":"The following environmental (configuration) options are available when configuring the Socks5 proxy:","title":"Tor Proxy Options"},{"location":"proxy/#binding-and-port","text":"This image configures by default a proxy binding of all ips through 0.0.0.0 and a port of 9050 (the tor default port). Access to the proxy is restricted to RFC1918](https://datatracker.ietf.org/doc/html/rfc1918#section-3) local network IP addresses through accept policies discussed below. The socks5 binding and port will be set to SocksPort 0 if TOR_PROXY=false , disabling the tor proxy client. Default configuration: SocksPort 0.0.0.0:9050 The binding and port can be configure using TOR_PROXY_PORT=<address>:<port> with TOR_PROXY=true . The below env options will bind the proxy to localhost (i.e. 127.0.0.1) on port 9150. This might be useful when using docker-compose and networking services together. docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_PORT=localhost:9150 \\ -p 9150:9150/tcp \\ barneybuffet/tor:latest Bind to ip 192.168.0.1 on port 9100: docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_PORT=192.168.0.1:9100 \\ -p 9100:9100/tcp \\ barneybuffet/tor:latest","title":"Binding and Port"},{"location":"proxy/#accept-policy","text":"Tor will allow/deny SOCKS requests based on IP address. By default this image will accept the localhost and all connections from RFC1918 local network IP addresses. All other IP address will be rejected. The SocksPolicy reject * is not configurable by this docker image environmental flags. Default configuration: ## Accept localhost and RFC1918 networks, reject all others SocksPolicy accept 127.0.0.1,accept 10.0.0.0/8,accept 172.16.0.0/12,accept 192.168.0.0/16 SocksPolicy reject * The accept socks policy can be configure using TOR_PROXY_ACCEPT=accept <ip or IP Subnet>,accept <ip or IP Subnet>,... with TOR_PROXY=true . Allow only 192.168.0.11 to use the proxy: docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_ACCEPT='accept 192.168.0.11' \\ -p 9050:9050/tcp \\ barneybuffet/tor:latest Will configure to ## Accept localhost and RFC1918 networks, reject all others SocksPolicy accept 192.168.0.11 SocksPolicy reject * Allow only 192.168.1.0 subnet IPs to use the proxy: docker run -d --name tor \\ -e TOR_PROXY=true \\ -e TOR_PROXY_ACCEPT=\"accept localhost,accept 192.168.1.0/24\" \\ -p 9050:9050/tcp \\ barneybuffet/tor:latest Will configure to ## Accept localhost and RFC1918 networks, reject all others SocksPolicy accept localhost,accept 192.168.1.0/24 SocksPolicy reject *","title":"Accept Policy"},{"location":"proxy/#test-tor-is-working","text":"Once the docker container is running the tor connection can be tested by opening a terminal within the container and using the below commands Check the container ip address against your internet ip address curl --socks5 localhost:9050 --socks5-hostname localhost:9050 https://ipinfo.io/ip Confirm connection to the Tor network curl --socks5 localhost:9050 --socks5-hostname localhost:9050 -s https://check.torproject.org/ | cat | grep -m 1 Congratulations | xargs The connection to the container can be check using the same commands.","title":"Test Tor is working"},{"location":"relay/","text":"Tor Relay NOT IMPLEMENTED YET","title":"Relay"},{"location":"relay/#tor-relay","text":"NOT IMPLEMENTED YET","title":"Tor Relay"},{"location":"service/","text":"Location Hidden Service (.onion) A hidden service is a site you visit or a service that uses Tor technology to stay secure and, if the owner wishes, anonymous. The terms \"hidden services\" and \"onion services\" are interchangeably. By default this image will not enable any hidden services. To enable hidden services the -e TOR_SERVICE=true flag is needed along wih a list of hosts in -e TOR_SERVICE_HOSTS='<hostname>=<wan port>:<redirect IP>:<redirect port>,...' . Multiple services can be configure for a host. It is generally good practice to create seperate Tor deamons for each hostname, but is not required. Start a Hidden Service To start a Tor hidden service with this image run the following docker command: docker run -d --name tor -e TOR_SERVICE=true -e TOR_SERVICE_HOSTS='bitcoin=443:192.168.1.7:80,8443:192.168.1.5:443' -e TOR_SERVICE_HOSTS_CLIENTS='bitcoin=barney' -p 9050:9050/tcp barneybuffet/tor:latest` The image will: Tell Tor to create a hidden service in /tor/hidden_services/<hostname> Configure Tor to accept onion requests on a given port and redirect to an IP address and port Create an authroized client private/public key pair The onion address can be found in /tor/hidden_services/<hostname>/hostname The private key can be found in /tor/hidden_services/auth_privates/<hostname>/<client>.auth_private Hidden Services Options The TOR_SERVICE_HOSTS flag uses the following configuration within the string. -e TOR_SERVICE_HOSTS='<hostname>=<wan port>:<redirect IP>:<redirect port>,<wan port>:<redirect IP>:<redirect port>,... <hostname>=<wan port>:<redirect IP>:<redirect port>,<wan port>:<redirect IP>:<redirect port>,... Multiple hosts can be configure with a space seperated list. And multiple services can be configure for each service with comma seperated array. -e TOR_SERVICE_HOSTS='<hostname>=<service 1>,<service 2>,... <hostname 2>=<service 1>,<service 2>,<service 3> ... Each service is configured via : seperated list and requires a wan, ip address and port Option Description <hostname> The hidden service holder <wan port> The incoming port the onion service will listen on <redirect ip> The ip address to redirect the onion request to <redictio port> The port on the ip address to redirect the onion request to Hidden Services Clients Client authorization is a method to make an onion service private and authenticated. It requires Tor clients to provide an authentication credential in order to connect to the onion service. The service side is configured with a public key and the client can only access it with a private key. Note: Once you have configured client authorization, anyone with the address will not be able to access it from this point on. If no authorization is configured, the service will be accessible to anyone with the onion address. This docker image has a bash script that generates public/private key pairs. To generate key during the first container start up you can set the -e TOR_SERVICE_HOSTS_CLIENTS=hostname=client-1,client-2,... . The bash script will generate a private and matching public key. The keys are put in the following directories: Public Key: /tor/hidden_services/<hostname>/authorized_clients/<client>.auth Private Key: /tor/auth_privates/<hostname>/<client>.auth_private A new client private/public key can be generated at any time by opening a terminal in the docker container and running the bash script. client_auth.sh --service <hostname> --client alice To copy the private key for use with your Tor browser in osx open a terminal in the /tor/hidden_services/auth_privates/<hostname>/ binded port and use the following command. cp <client>.auth_private ~/Library/Application Support/TorBrowser-Data/Tor/ References Best Practices for Hosting Onion Services Tor Hidden Services Set up Your Onion Service Minimal safe Bash script template Client Authorization mtigas/onion-svc-v3-client-auth.sh","title":"Hidden Service"},{"location":"service/#location-hidden-service-onion","text":"A hidden service is a site you visit or a service that uses Tor technology to stay secure and, if the owner wishes, anonymous. The terms \"hidden services\" and \"onion services\" are interchangeably. By default this image will not enable any hidden services. To enable hidden services the -e TOR_SERVICE=true flag is needed along wih a list of hosts in -e TOR_SERVICE_HOSTS='<hostname>=<wan port>:<redirect IP>:<redirect port>,...' . Multiple services can be configure for a host. It is generally good practice to create seperate Tor deamons for each hostname, but is not required.","title":"Location Hidden Service (.onion)"},{"location":"service/#start-a-hidden-service","text":"To start a Tor hidden service with this image run the following docker command: docker run -d --name tor -e TOR_SERVICE=true -e TOR_SERVICE_HOSTS='bitcoin=443:192.168.1.7:80,8443:192.168.1.5:443' -e TOR_SERVICE_HOSTS_CLIENTS='bitcoin=barney' -p 9050:9050/tcp barneybuffet/tor:latest` The image will: Tell Tor to create a hidden service in /tor/hidden_services/<hostname> Configure Tor to accept onion requests on a given port and redirect to an IP address and port Create an authroized client private/public key pair The onion address can be found in /tor/hidden_services/<hostname>/hostname The private key can be found in /tor/hidden_services/auth_privates/<hostname>/<client>.auth_private","title":"Start a Hidden Service"},{"location":"service/#hidden-services-options","text":"The TOR_SERVICE_HOSTS flag uses the following configuration within the string. -e TOR_SERVICE_HOSTS='<hostname>=<wan port>:<redirect IP>:<redirect port>,<wan port>:<redirect IP>:<redirect port>,... <hostname>=<wan port>:<redirect IP>:<redirect port>,<wan port>:<redirect IP>:<redirect port>,... Multiple hosts can be configure with a space seperated list. And multiple services can be configure for each service with comma seperated array. -e TOR_SERVICE_HOSTS='<hostname>=<service 1>,<service 2>,... <hostname 2>=<service 1>,<service 2>,<service 3> ... Each service is configured via : seperated list and requires a wan, ip address and port Option Description <hostname> The hidden service holder <wan port> The incoming port the onion service will listen on <redirect ip> The ip address to redirect the onion request to <redictio port> The port on the ip address to redirect the onion request to","title":"Hidden Services Options"},{"location":"service/#hidden-services-clients","text":"Client authorization is a method to make an onion service private and authenticated. It requires Tor clients to provide an authentication credential in order to connect to the onion service. The service side is configured with a public key and the client can only access it with a private key. Note: Once you have configured client authorization, anyone with the address will not be able to access it from this point on. If no authorization is configured, the service will be accessible to anyone with the onion address. This docker image has a bash script that generates public/private key pairs. To generate key during the first container start up you can set the -e TOR_SERVICE_HOSTS_CLIENTS=hostname=client-1,client-2,... . The bash script will generate a private and matching public key. The keys are put in the following directories: Public Key: /tor/hidden_services/<hostname>/authorized_clients/<client>.auth Private Key: /tor/auth_privates/<hostname>/<client>.auth_private A new client private/public key can be generated at any time by opening a terminal in the docker container and running the bash script. client_auth.sh --service <hostname> --client alice To copy the private key for use with your Tor browser in osx open a terminal in the /tor/hidden_services/auth_privates/<hostname>/ binded port and use the following command. cp <client>.auth_private ~/Library/Application Support/TorBrowser-Data/Tor/","title":"Hidden Services Clients"},{"location":"service/#references","text":"Best Practices for Hosting Onion Services Tor Hidden Services Set up Your Onion Service Minimal safe Bash script template Client Authorization mtigas/onion-svc-v3-client-auth.sh","title":"References"}]}